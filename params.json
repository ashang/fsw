{"name":"Fsw","tagline":"A program which uses either the File System Events API of the Apple OS X operating system or the kqueue interface of *BSD systems to receive notifications when the contents of the specified files or directories are modified.","body":"fsw is a program that receives notifications when the contents of the specified files or directories are modified.  fsw implements three kind of watchers:\r\n\r\n  * A watcher based on the _File System Events API_ of Apple OS X.\r\n  * A watcher based on _kqueue_, an event notification interface introduced in\r\n    FreeBSD 4.1 and supported on most *BSD systems (including OS X).\r\n  * A watcher which periodically stats the file system, saves file modification\r\n    times in memory and manually calculates file system changes.\r\n\r\nfsw should build and work correctly on any system shipping either of the\r\naforementioned APIs.\r\n\r\nLimitations\r\n-----------\r\n\r\nThe limitations of fsw depend largely on the watcher being used:\r\n\r\n  * The FSEvents watcher, available only on Apple OS X, has no known limitations\r\n    and scales very well with the number of files being observed.\r\n  * The kqueue watcher, available on any *BSD system featuring kqueue, requires\r\n    a file descriptor to be opened for every file being watched.  As a result,\r\n    this watcher scales badly with the number of files being observed and may\r\n    begin to misbehave as soon as the fsw process runs out of file descriptors.\r\n    In this case, fsw dumps one error on standard error for every file that\r\n    cannot be opened.\r\n  * The poll watcher, available on any platform, only relies on available CPU\r\n    and memory to perform its task.  The performance of this watcher degrades\r\n    linearly with the number of files being watched.  \r\n\r\nUsage recommendations are as follows:\r\n\r\n  * On OS X, use only the FSEvents watcher.\r\n  * If the number of files to observe is sufficiently small, use the kqueue\r\n    watcher.  Beware that on some systems the maximum number of file descriptors\r\n    that can be opened by a process is set to a very low value (values as low\r\n    as 256 are not uncommon), even if the operating system may allow a much\r\n    larger value.  In this case, check your OS documentation to raise this limit\r\n    on either a per process or a system-wide basis.\r\n  * If feasible, watch directories instead of watching files.\r\n  * If none of the above applies, use the poll watcher.  The authors' experience\r\n    indicates that fsw requires approximately 600 MB or RAM memory to observe a\r\n    hierarchy of 500.000 files if std::hash is defined in <functional> otherwise\r\n    it requires approximately 1300 MB.  A common bottleneck of the poll watcher\r\n    is disk access, since stat()-ing a huge number of files may take a huge\r\n    amount of time.  In this case, the latency should be set to a sufficiently\r\n    large value in order to reduce the performance degradation that may result\r\n    from fsw's frequent disk access.\r\n\r\nInstallation\r\n------------\r\n\r\nSee the INSTALL file for detailed information about how to configure and install\r\nfsw.\r\n\r\n  fsw is a C++ program and a C++ compiler compliant with the C++11 standard is\r\nrequired to compile it.  A complete C/C++ toolchain for OS X is provided with\r\nApple XCode, which can freely installed from the Apple App Store.\r\n\r\n  No other software packages or dependencies are required to configure and\r\ninstall fsw but the aforementioned APIs used by the file system watchers.\r\n\r\nUsage\r\n=====\r\n\r\nfsw accepts a list of paths for which change events should be received:\r\n\r\n    $ fsw [options] ... path-0 ... path-n\r\n\r\nThe event stream is created even if any of the paths do not exist yet.  If they\r\nare created after fsw is launched, change events will be properly received.\r\nDepending on the wathcher being used, newly created paths will be monitored\r\nafter the amount of configured latency has elapsed.\r\n\r\n  For more information, refer to the fsw man page.\r\n\r\nBug Reports\r\n-----------\r\n\r\nBug reports can be sent directly to the authors.\r\n\r\n-----\r\n\r\nCopyright (C) 2014 Enrico M. Crisostomo\r\n\r\nThis program is free software; you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation; either version 3, or (at your option)\r\nany later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}